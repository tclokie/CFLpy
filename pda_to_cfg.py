states = {'-0', '-1', '-2', '+2', '+1(1)', '+1(10)', '+0(100)', '+0(10)', '+0(000)', 'END'}
alphabet = {'0', '1'}
stack_alphabet = {'Z', 'X'}
start_state = '-0'
start_stack = ['Z']
delta = {
    ('-0', '0', 'Z'): ('-0', 'Z'),
    ('-0', '0', 'X'): ('-0', 'X'),
    ('-0', '1', 'Z'): ('-1', 'Z'),
    ('-0', '1', 'X'): ('-1', 'X'),
    ('-1', '0', 'Z'): ('-0', 'XZ'),
    ('-1', '0', 'X'): ('-0', 'XX'),
    ('-1', '1', 'Z'): ('+2', 'Z'),
    ('-1', '1', 'X'): ('-2', ''),
    ('-2', '0', 'Z'): ('-1', 'Z'),
    ('-2', '0', 'X'): ('-1', 'X'),
    ('-2', '1', 'Z'): ('-2', 'Z'),
    ('-2', '1', 'X'): ('-2', 'X'),
    ('+2', '0', 'Z'): ('+1(10)', 'Z'),
    ('+2', '0', 'X'): ('+1(10)', 'X'),
    ('+2', '1', 'Z'): ('+2', 'Z'),
    ('+2', '1', 'X'): ('+2', 'X'),
    ('+1(10)', '0', 'Z'): ('-0', 'Z'),
    ('+1(10)', '0', 'X'): ('+0(100)', ''),
    ('+1(10)', '1', 'Z'): ('+2', 'XZ'),
    ('+1(10)', '1', 'X'): ('+2', 'XX'),
    ('+1(1)', '0', 'Z'): ('-0', 'Z'),
    ('+1(1)', '0', 'X'): ('+0(10)', ''),
    ('+1(1)', '1', 'Z'): ('+2', 'XZ'),
    ('+1(1)', '1', 'X'): ('+2', 'XX'),
    ('+0(000)', '0', 'Z'): ('+0(000)', 'Z'),
    ('+0(000)', '0', 'X'): ('+0(000)', 'X'),
    ('+0(000)', '1', 'Z'): ('+1(1)', 'Z'),
    ('+0(000)', '1', 'X'): ('+1(1)', 'X'),
    ('+0(10)', '0', 'Z'): ('+0(100)', 'Z'),
    ('+0(10)', '0', 'X'): ('+0(100)', 'X'),
    ('+0(10)', '1', 'Z'): ('+1(1)', 'Z'),
    ('+0(10)', '1', 'X'): ('+1(1)', 'X'),
    ('+0(100)', '0', 'Z'): ('+0(000)', 'Z'),
    ('+0(100)', '0', 'X'): ('+0(000)', 'X'),
    ('+0(100)', '1', 'Z'): ('+1(1)', 'Z'),
    ('+0(100)', '1', 'X'): ('+1(1)', 'X'),
    ('+0(100)', '', 'Z'): ('END', ''),
    ('+0(100)', '', 'X'): ('END', ''),
    ('END', '', 'Z'): ('END', ''),
    ('END', '', 'X'): ('END', '')
}


'''
def d(q, a, A): # a is '0' or '1', A is 'Z' or 'X'
    if (q == '-0'):
        if (a == '0'):
            return (q, A)
        else:
            return ('-1', A)
    elif (q == '-1'):
        if (a == '0'):
            return ('-0', 'X'+A)
        else:
            if (A == 'Z'):
                return ('+2', A)
            else:
                return ('-2')
'''

V = set()
P = {}

for q in states:
    for A in stack_alphabet:
        for p in states:
            V.add((q,A,p))

S = ('-0', 'Z', 'END')
print(V.__contains__())

# Instantiate P
for v in V:
    P[v] = set()
    
    # m = 0
    
    # m = 1
    
    # m = 2

